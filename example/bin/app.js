// Generated by Haxe 3.4.7
if (process.version < "v4.0.0") console.warn("Module " + (typeof(module) == "undefined" ? "" : module.filename) + " requires node.js version 4.0.0 or higher");
(function ($global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var djNode_BaseApp = function() {
	this.argsAction = null;
	this.argsOptions = { };
	this.argsOutput = null;
	this.argsInput = [];
	this.ARGS = { inputRule : "opt", outputRule : "opt", requireAction : false, supportWildcards : true, supportStrayArgs : false, helpInput : null, helpOutput : null, Actions : [], Options : [["-o","output","","yes"]]};
	this.PROGRAM_INFO = { name : "nodeJS Application", version : "0.1"};
	var _gthis = this;
	djNode_tools_LOG.init();
	djNode_BaseApp.TERMINAL = new djNode_Terminal();
	this.T = djNode_BaseApp.TERMINAL;
	process.once("exit",function(code) {
		djNode_tools_LOG.log("==> [EXIT] with code " + code,null,{ fileName : "BaseApp.hx", lineNumber : 101, className : "djNode.BaseApp", methodName : "new"});
		_gthis.onExit();
	});
	process.once("SIGINT",function() {
		process.exit(1);
	});
	process.once("uncaughtException",function(err) {
		djNode_tools_LOG.log("Critical Error - ",4,{ fileName : "BaseApp.hx", lineNumber : 120, className : "djNode.BaseApp", methodName : "new"});
		if(js_Boot.__instanceof(err,Error)) {
			djNode_tools_LOG.log(err.message,4,{ fileName : "BaseApp.hx", lineNumber : 123, className : "djNode.BaseApp", methodName : "new"});
			_gthis.exitError(err.message);
		}
		djNode_tools_LOG.log(err,4,{ fileName : "BaseApp.hx", lineNumber : 126, className : "djNode.BaseApp", methodName : "new"});
		_gthis.exitError(err);
	});
	try {
		this.init();
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,String) ) {
			this.printBanner(true);
			if(e == "HELP") {
				this.printHelp();
				process.exit(0);
			}
			this.exitError(e,true);
		} else throw(e);
	}
	this.onStart();
};
djNode_BaseApp.__name__ = ["djNode","BaseApp"];
djNode_BaseApp.prototype = {
	init: function() {
		var _this = this.T;
		process.stdout.write("\x1B[0m");
		var P = this.PROGRAM_INFO;
		var A = this.ARGS;
		djNode_tools_LOG.log("Creating Application [ " + P.name + " ,v" + P.version + " ]",null,{ fileName : "BaseApp.hx", lineNumber : 159, className : "djNode.BaseApp", methodName : "init"});
		var cc = 0;
		var $arguments = process.argv.slice(2);
		var arg;
		while(true) {
			arg = $arguments[cc++];
			if(!(arg != null)) {
				break;
			}
			if(arg.charAt(0) == "-") {
				if(arg.toLowerCase().indexOf("-help") == 0) {
					throw new js__$Boot_HaxeError("HELP");
				}
				var o = this.getArgOption(arg);
				if(o == null) {
					throw new js__$Boot_HaxeError("Illegal argument [" + arg + "]");
				}
				if(o[3] != null) {
					var nextArg = $arguments[cc++];
					if(nextArg == null || this.getArgOption(nextArg) != null) {
						throw new js__$Boot_HaxeError("Argument [" + arg + "] requires a parameter");
					}
					this.argsOptions[HxOverrides.substr(o[0],1,null)] = nextArg;
					if(o[0] == "-o") {
						this.argsOutput = nextArg;
					}
				} else {
					this.argsOptions[HxOverrides.substr(o[0],1,null)] = true;
				}
				continue;
			}
			var a = this.getArgAction(arg);
			if(a != null) {
				if(this.argsAction != null) {
					throw new js__$Boot_HaxeError("You can only set one <action>");
				}
				this.argsAction = a[0];
				continue;
			}
			this.argsInput.push(arg);
		}
		var _g = 0;
		var _g1 = this.argsInput;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.indexOf("*") >= 0) {
				if(this.argsInput.length > 1) {
					throw new js__$Boot_HaxeError("Multiple Inputs with wildcards are not supported");
				}
				this.argsInput = djNode_tools_FileTool.getFileListFromWildcard(i);
				if(this.argsInput.length == 0) {
					throw new js__$Boot_HaxeError("Wildcard `" + i + "` returned 0 files");
				}
				break;
			}
		}
		if(this.argsAction == null && this.argsInput.length > 0) {
			var act = this.getArgAction(null,HxOverrides.substr(js_node_Path.extname(this.argsInput[0].toLowerCase()),1,null));
			if(act != null) {
				this.argsAction = act[1];
			}
		}
		if(this.argsInput.length == 0 && ["yes","multi"].indexOf(A.inputRule) >= 0) {
			throw new js__$Boot_HaxeError("Input is required");
		}
		if(this.argsOutput == null && A.outputRule == "yes") {
			throw new js__$Boot_HaxeError("Output is required");
		}
		if(A.requireAction && this.argsAction == null) {
			throw new js__$Boot_HaxeError("Setting an action is required");
		}
	}
	,onStart: function() {
	}
	,onExit: function() {
		djNode_tools_LOG.end();
		var _this = this.T;
		process.stdout.write("\x1B[0m");
		this.T.cursorShow();
	}
	,waitKeyQuit: function() {
		var _this = this.T.fg("darkgray");
		process.stdout.write("\n");
		var _this1 = _this;
		process.stdout.write("Press any key to quit." + "\n");
		var _this2 = this.T;
		process.stdout.write("\x1B[0m");
		djNode_Keyboard.startCapture(true,function(e) {
			process.exit(0);
		});
	}
	,printHelp: function() {
		var A = this.ARGS;
		var P = this.PROGRAM_INFO;
		var __getInfoRule = function(rule) {
			if(rule == "opt") {
				return "is optional.";
			} else {
				return "is required.";
			}
		};
		var __fixDescFormat = function(s) {
			if(s != null && s.length > 0) {
				var _this_r = new RegExp("(\n)","g".split("u").join(""));
				return s.replace(_this_r,"\n\t");
			} else {
				return "...";
			}
		};
		if(A.helpInput != null) {
			var _this_r1 = new RegExp("(\n)","g".split("u").join(""));
			A.helpInput = "~darkgray~\t " + A.helpInput.replace(_this_r1,"\n\t ");
		}
		if(A.helpOutput != null) {
			var _this_r2 = new RegExp("(\n)","g".split("u").join(""));
			A.helpOutput = "~darkgray~\t " + A.helpOutput.replace(_this_r2,"\n\t ");
		}
		A.Options.shift();
		var _g = 0;
		var _g1 = A.Actions;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			a[2] = __fixDescFormat(a[2]);
		}
		var _g2 = 0;
		var _g11 = A.Options;
		while(_g2 < _g11.length) {
			var a1 = _g11[_g2];
			++_g2;
			a1[2] = __fixDescFormat(a1[2]);
		}
		var _this = this.T;
		var str = _this.sprintf(" ~green~Program Usage: ~!~ \n");
		process.stdout.write(str);
		if(P.executable == null) {
			P.executable = "app.js";
		}
		var s1 = "   " + P.executable + " ";
		if(A.Actions.length > 0) {
			s1 += "<action> ";
		}
		if(A.Options.length > 0) {
			s1 += "-<option> <parameter> ...\n      ";
		}
		if(A.inputRule != "no") {
			s1 += "<input> ";
			if(A.inputRule == "multi") {
				s1 += "... ";
			}
		}
		if(A.outputRule != "no") {
			s1 += "-o <output> ";
		}
		var _this1 = this.T;
		process.stdout.write(s1);
		process.stdout.write("\n");
		var _this2 = _this1;
		var str1 = _this2.sprintf("~darkgray~ ~line2~");
		process.stdout.write(str1);
		if(A.inputRule != "no") {
			var _this3 = this.T;
			var str2 = _this3.sprintf("~yellow~ <input> ~!~");
			process.stdout.write(str2);
			var _this4 = this.T;
			var str3 = __getInfoRule(A.inputRule);
			process.stdout.write(str3);
			if(A.inputRule == "multi") {
				var _this5 = this.T;
				var str4 = _this5.sprintf("~darkcyan~ <multiple supported>");
				process.stdout.write(str4);
			}
			var _this6 = this.T;
			process.stdout.write("\n");
			if(A.helpInput != null) {
				var _this7 = this.T;
				var str5 = _this7.sprintf(A.helpInput);
				process.stdout.write(str5);
				var _this8 = _this7;
				process.stdout.write("\n");
			}
		}
		if(A.outputRule != "no") {
			var _this9 = this.T;
			var str6 = _this9.sprintf("~yellow~ <output> ~!~");
			process.stdout.write(str6);
			var _this10 = this.T;
			var str7 = __getInfoRule(A.outputRule);
			process.stdout.write(str7);
			var _this11 = _this10;
			process.stdout.write("\n");
			if(A.helpOutput != null) {
				var _this12 = this.T;
				var str8 = _this12.sprintf(A.helpOutput);
				process.stdout.write(str8);
				var _this13 = _this12;
				process.stdout.write("\n");
			}
		}
		var _this14 = this.T;
		var str9 = _this14.sprintf(" ~darkgray~~line2~");
		process.stdout.write(str9);
		var _this15 = this.T;
		process.stdout.write("\x1B[0m");
		if(A.Actions.length > 0) {
			var _this16 = this.T;
			var str10 = _this16.sprintf(" ~magenta~<actions> ~!fg~");
			process.stdout.write(str10);
			var _this17 = this.T;
			var str11 = _this17.sprintf("~darkmagenta~you can set one action at a time ~!~\n");
			process.stdout.write(str11);
			var _g3 = 0;
			var _g12 = A.Actions;
			while(_g3 < _g12.length) {
				var i = _g12[_g3];
				++_g3;
				var _this18 = this.T;
				var str12 = _this18.sprintf("~white~ " + i[0] + "\t " + i[1]);
				process.stdout.write(str12);
				if(i[3] != null) {
					var _this19 = this.T;
					var str13 = _this19.sprintf("  ~gray~ Auto Ext : (" + i[3] + ")");
					process.stdout.write(str13);
				}
				var _this20 = this.T;
				var str14 = _this20.sprintf("\n\t~darkgray~ " + i[2] + "\n");
				process.stdout.write(str14);
				var _this21 = _this20;
				process.stdout.write("\x1B[0m");
			}
		}
		if(A.Options.length > 0) {
			var _this22 = this.T;
			var str15 = _this22.sprintf(" ~cyan~<options> ~!fg~");
			process.stdout.write(str15);
			var _this23 = this.T;
			var str16 = _this23.sprintf("~darkcyan~you can set many options~!~\n");
			process.stdout.write(str16);
			var _g4 = 0;
			var _g13 = A.Options;
			while(_g4 < _g13.length) {
				var i1 = _g13[_g4];
				++_g4;
				var _this24 = this.T;
				var str17 = _this24.sprintf("~white~ " + i1[0] + "\t " + i1[1]);
				process.stdout.write(str17);
				if(i1[3] != null) {
					var _this25 = this.T;
					var str18 = _this25.sprintf("~gray~ [requires parameter] ");
					process.stdout.write(str18);
				}
				var _this26 = this.T;
				var str19 = _this26.sprintf("\n\t~darkgray~ " + i1[2] + "\n");
				process.stdout.write(str19);
				var _this27 = _this26;
				process.stdout.write("\x1B[0m");
			}
		}
	}
	,printBanner: function(longer) {
		if(longer == null) {
			longer = false;
		}
		var P = this.PROGRAM_INFO;
		var col = "white";
		var lineCol = "darkgray";
		var _this = this.T;
		process.stdout.write("\n");
		var _this1 = this.T;
		var str = _this1.sprintf("== ~" + col + "~" + P.name + " v" + P.version + "~!~\n");
		process.stdout.write(str);
		if(longer && P.desc != null) {
			var _this2 = this.T;
			var str1 = _this2.sprintf(" - " + P.desc + "\n");
			process.stdout.write(str1);
		}
		if(longer && P.author != null) {
			var _this3 = this.T;
			var str2 = _this3.sprintf(" - " + P.author + "\n");
			process.stdout.write(str2);
		}
		var _this4 = this.T;
		var str3 = _this4.sprintf(" ~" + lineCol + "~~line~~!~");
		process.stdout.write(str3);
	}
	,exitError: function(text,showHelp) {
		if(showHelp == null) {
			showHelp = false;
		}
		var _this = this.T;
		var str = _this.sprintf("~bg_darkred~~white~ ERROR ~!~ ~red~" + text + "\n");
		process.stdout.write(str);
		if(showHelp) {
			var _this1 = this.T;
			var str1 = _this1.sprintf("~darkgray~ ~line2~~yellow~ -help ~!~ for usage info\n");
			process.stdout.write(str1);
		}
		process.exit(1);
	}
	,getArgOption: function(tag) {
		var _g = 0;
		var _g1 = this.ARGS.Options;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o[0] == tag) {
				return o;
			}
		}
		return null;
	}
	,getArgAction: function(tag,ext) {
		var _g = 0;
		var _g1 = this.ARGS.Actions;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(tag != null && a[0] == tag) {
				return a;
			}
			if(ext != null && a[3] != null) {
				if(a[3].split(",").indexOf(ext.toLowerCase()) >= 0) {
					return a;
				}
			}
		}
		return null;
	}
	,__class__: djNode_BaseApp
};
var DevMain = function() {
	djNode_BaseApp.call(this);
};
DevMain.__name__ = ["DevMain"];
DevMain.main = function() {
	new DevMain();
};
DevMain.__super__ = djNode_BaseApp;
DevMain.prototype = $extend(djNode_BaseApp.prototype,{
	init: function() {
		this.PROGRAM_INFO.name = "djTui development";
		djNode_tools_LOG.pipeTrace();
		djNode_tools_LOG.setLogFile("a:\\log.txt",true);
		djNode_BaseApp.prototype.init.call(this);
	}
	,onStart: function() {
		this.T.pageDown();
		this.T.clearScreen();
		this.T.cursorHide();
		djTui_WM.create(new adapter_InputObj(),new adapter_TerminalObj(),80,25);
		var w1 = new djTui_Window();
		w1.padding(3,1).move(3,3).size(20,14);
		var _g = 0;
		while(_g < 5) {
			var i = _g++;
			var b = new djTui_el_Button("Bnt " + i,null,i % 3);
			w1.addStacked(b);
		}
		var a1 = new djTui_el_Label("Label");
		var a2 = new djTui_el_Button(" ... ",false);
		var a3 = new djTui_el_Toggle();
		w1.addStacked(a1);
		w1.addStacked(a2);
		w1.addStacked(a3);
		djTui_WM.addWindow(w1,true);
		w1.set_title("Main win");
	}
	,onExit: function() {
		var _this = this.T;
		process.stdout.write("\x1B[0m");
		this.T.move(0,djTui_WM.height);
		djNode_BaseApp.prototype.onExit.call(this);
	}
	,__class__: DevMain
});
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = ["EReg"];
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			var tmp = this.r;
			var tmp1 = len < 0 ? s : HxOverrides.substr(s,0,pos + len);
			this.r.m = tmp.exec(tmp1);
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
Math.__name__ = ["Math"];
var Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringTools = function() { };
StringTools.__name__ = ["StringTools"];
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	while(s.length < l) s = c + s;
	return s;
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	while(s.length < l) s += c;
	return s;
};
var Type = function() { };
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
var djTui_ext_IInput = function() { };
djTui_ext_IInput.__name__ = ["djTui","ext","IInput"];
djTui_ext_IInput.prototype = {
	__class__: djTui_ext_IInput
};
var adapter_InputObj = function() {
};
adapter_InputObj.__name__ = ["adapter","InputObj"];
adapter_InputObj.__interfaces__ = [djTui_ext_IInput];
adapter_InputObj.prototype = {
	_onKey: function(k) {
		var code = djNode_Keycode.toKeyCodeID(k);
		if(code != null) {
			var tmp;
			switch(code[1]) {
			case 0:
				tmp = "up";
				break;
			case 1:
				tmp = "down";
				break;
			case 2:
				tmp = "left";
				break;
			case 3:
				tmp = "right";
				break;
			case 8:
				tmp = "pageup";
				break;
			case 9:
				tmp = "pagedown";
				break;
			case 10:
				tmp = "back";
				break;
			case 11:
				tmp = "tab";
				break;
			case 12:
				tmp = "enter";
				break;
			case 13:
				tmp = "space";
				break;
			case 14:
				tmp = "esc";
				break;
			default:
				tmp = "";
			}
			this.onKey(tmp);
		} else {
			this.onKey(k);
		}
	}
	,start: function() {
		djNode_Keyboard.startCapture(true,$bind(this,this._onKey));
	}
	,stop: function() {
		djNode_Keyboard.stop();
	}
	,__class__: adapter_InputObj
};
var djTui_ext_ITerminal = function() { };
djTui_ext_ITerminal.__name__ = ["djTui","ext","ITerminal"];
djTui_ext_ITerminal.prototype = {
	__class__: djTui_ext_ITerminal
};
var adapter_TerminalObj = function() {
	this.t = djNode_BaseApp.TERMINAL;
	this.MAX_WIDTH = this.t.getWidth();
	this.MAX_HEIGHT = this.t.getHeight();
};
adapter_TerminalObj.__name__ = ["adapter","TerminalObj"];
adapter_TerminalObj.__interfaces__ = [djTui_ext_ITerminal];
adapter_TerminalObj.prototype = {
	saveCursor: function() {
		var _this = this.t;
		process.stdout.write("\x1B[s");
	}
	,restoreCursor: function() {
		var _this = this.t;
		process.stdout.write("\x1B[u");
	}
	,setCursorSymbol: function(s) {
	}
	,print: function(s) {
		process.stdout.write(s);
		return this;
	}
	,move: function(x,y) {
		this.t.move(x,y);
		return this;
	}
	,moveR: function(x,y) {
		if(x > 0) {
			var _this = this.t;
			process.stdout.write("\x1B[" + x + "C");
		} else if(x < 0) {
			var _this1 = this.t;
			process.stdout.write("\x1B[" + -x + "D");
		}
		if(y > 0) {
			var _this2 = this.t;
			process.stdout.write("\x1B[" + y + "B");
		} else if(y < 0) {
			var _this3 = this.t;
			process.stdout.write("\x1B[" + -y + "A");
		}
		return this;
	}
	,fg: function(col) {
		this.t.fg(col);
		return this;
	}
	,bg: function(col) {
		this.t.bg(col);
		return this;
	}
	,resetFG: function() {
		var _this = this.t;
		process.stdout.write("\x1B[39m");
		return this;
	}
	,resetBG: function() {
		var _this = this.t;
		process.stdout.write("\x1B[49m");
		return this;
	}
	,reset: function() {
		var _this = this.t;
		process.stdout.write("\x1B[0m");
		return this;
	}
	,bold: function(state) {
		if(state) {
			this.t.bold();
		} else {
			var _this = this.t;
			process.stdout.write("\x1B[21m");
		}
		return this;
	}
	,italics: function(state) {
		return this;
	}
	,__class__: adapter_TerminalObj
};
var djNode_KeycodeID = { __ename__ : true, __constructs__ : ["up","down","left","right","home","insert","delete","end","pageup","pagedown","backsp","tab","enter","space","esc","ctrlC","acute","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","other"] };
djNode_KeycodeID.up = ["up",0];
djNode_KeycodeID.up.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.down = ["down",1];
djNode_KeycodeID.down.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.left = ["left",2];
djNode_KeycodeID.left.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.right = ["right",3];
djNode_KeycodeID.right.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.home = ["home",4];
djNode_KeycodeID.home.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.insert = ["insert",5];
djNode_KeycodeID.insert.__enum__ = djNode_KeycodeID;
djNode_KeycodeID["delete"] = ["delete",6];
djNode_KeycodeID["delete"].__enum__ = djNode_KeycodeID;
djNode_KeycodeID.end = ["end",7];
djNode_KeycodeID.end.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.pageup = ["pageup",8];
djNode_KeycodeID.pageup.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.pagedown = ["pagedown",9];
djNode_KeycodeID.pagedown.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.backsp = ["backsp",10];
djNode_KeycodeID.backsp.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.tab = ["tab",11];
djNode_KeycodeID.tab.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.enter = ["enter",12];
djNode_KeycodeID.enter.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.space = ["space",13];
djNode_KeycodeID.space.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.esc = ["esc",14];
djNode_KeycodeID.esc.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.ctrlC = ["ctrlC",15];
djNode_KeycodeID.ctrlC.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.acute = ["acute",16];
djNode_KeycodeID.acute.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.F1 = ["F1",17];
djNode_KeycodeID.F1.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.F2 = ["F2",18];
djNode_KeycodeID.F2.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.F3 = ["F3",19];
djNode_KeycodeID.F3.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.F4 = ["F4",20];
djNode_KeycodeID.F4.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.F5 = ["F5",21];
djNode_KeycodeID.F5.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.F6 = ["F6",22];
djNode_KeycodeID.F6.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.F7 = ["F7",23];
djNode_KeycodeID.F7.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.F8 = ["F8",24];
djNode_KeycodeID.F8.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.F9 = ["F9",25];
djNode_KeycodeID.F9.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.F10 = ["F10",26];
djNode_KeycodeID.F10.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.F11 = ["F11",27];
djNode_KeycodeID.F11.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.F12 = ["F12",28];
djNode_KeycodeID.F12.__enum__ = djNode_KeycodeID;
djNode_KeycodeID.other = ["other",29];
djNode_KeycodeID.other.__enum__ = djNode_KeycodeID;
var djNode_Keycode = function() { };
djNode_Keycode.__name__ = ["djNode","Keycode"];
djNode_Keycode.toKeyCodeID = function(key) {
	if(HxOverrides.cca(key,1) == null) {
		var _g = HxOverrides.cca(key,0);
		switch(_g) {
		case 3:
			return djNode_KeycodeID.ctrlC;
		case 8:
			return djNode_KeycodeID.backsp;
		case 9:
			return djNode_KeycodeID.tab;
		case 13:
			return djNode_KeycodeID.enter;
		case 27:
			return djNode_KeycodeID.esc;
		case 32:
			return djNode_KeycodeID.space;
		case 96:
			return djNode_KeycodeID.acute;
		case 127:
			return djNode_KeycodeID.backsp;
		}
	} else if(HxOverrides.cca(key,0) == 27 && HxOverrides.cca(key,1) == 91) {
		var _g1 = HxOverrides.cca(key,2);
		switch(_g1) {
		case 49:
			var _g2 = HxOverrides.cca(key,3);
			switch(_g2) {
			case 55:
				return djNode_KeycodeID.F6;
			case 56:
				return djNode_KeycodeID.F7;
			case 57:
				return djNode_KeycodeID.F8;
			case 126:
				return djNode_KeycodeID.home;
			}
			break;
		case 50:
			var _g3 = HxOverrides.cca(key,3);
			switch(_g3) {
			case 48:
				return djNode_KeycodeID.F9;
			case 49:
				return djNode_KeycodeID.F10;
			case 51:
				return djNode_KeycodeID.F11;
			case 52:
				return djNode_KeycodeID.F12;
			case 126:
				return djNode_KeycodeID.insert;
			}
			break;
		case 51:
			return djNode_KeycodeID["delete"];
		case 52:
			return djNode_KeycodeID.end;
		case 53:
			return djNode_KeycodeID.pageup;
		case 54:
			return djNode_KeycodeID.pagedown;
		case 65:
			return djNode_KeycodeID.up;
		case 66:
			return djNode_KeycodeID.down;
		case 67:
			return djNode_KeycodeID.right;
		case 68:
			return djNode_KeycodeID.left;
		case 91:
			var _g4 = HxOverrides.cca(key,3);
			switch(_g4) {
			case 65:
				return djNode_KeycodeID.F1;
			case 66:
				return djNode_KeycodeID.F2;
			case 67:
				return djNode_KeycodeID.F3;
			case 68:
				return djNode_KeycodeID.F4;
			case 69:
				return djNode_KeycodeID.F5;
			}
			break;
		}
	}
	return null;
};
var djNode_Keyboard = function() { };
djNode_Keyboard.__name__ = ["djNode","Keyboard"];
djNode_Keyboard.startCapture = function(realtime,callback) {
	if(realtime == null) {
		realtime = true;
	}
	djNode_Keyboard.stop();
	if(callback != null) {
		djNode_Keyboard.onData = callback;
	}
	djNode_Keyboard.stdin = process.stdin;
	djNode_Keyboard.stdin.setRawMode(realtime);
	djNode_Keyboard.stdin.setEncoding("utf8");
	djNode_Keyboard.stdin.on("data",djNode_Keyboard.onKeyData);
	djNode_Keyboard.stdin.resume();
};
djNode_Keyboard.onKeyData = function(data) {
	if(djNode_Keyboard.FLAG_CAN_BREAK && (data == djNode_Keycode.CTRLC || data == djNode_Keycode.ESC)) {
		djNode_Keyboard.stop();
		if(djNode_Keyboard.onBreak != null) {
			djNode_Keyboard.onBreak();
		}
		djNode_Keyboard.onBreak = null;
		return;
	}
	if(djNode_Keyboard.onData != null) {
		djNode_Keyboard.onData(data);
	}
};
djNode_Keyboard.stop = function() {
	if(djNode_Keyboard.stdin == null) {
		return;
	}
	djNode_Keyboard.stdin.pause();
	djNode_Keyboard.stdin.setRawMode(false);
	djNode_Keyboard.stdin.removeAllListeners("data");
};
djNode_Keyboard.flush = function() {
	if(djNode_Keyboard.stdin == null) {
		return;
	}
	djNode_Keyboard.stdin.pause();
	djNode_Keyboard.stdin.resume();
};
var djNode_Terminal = function() {
	this.colormap_fg = new haxe_ds_StringMap();
	var _this = this.colormap_fg;
	var key = "darkgray";
	if(__map_reserved[key] != null) {
		_this.setReserved(key,"\x1B[90m");
	} else {
		_this.h[key] = "\x1B[90m";
	}
	var _this1 = this.colormap_fg;
	var key1 = "red";
	if(__map_reserved[key1] != null) {
		_this1.setReserved(key1,"\x1B[91m");
	} else {
		_this1.h[key1] = "\x1B[91m";
	}
	var _this2 = this.colormap_fg;
	var key2 = "green";
	if(__map_reserved[key2] != null) {
		_this2.setReserved(key2,"\x1B[92m");
	} else {
		_this2.h[key2] = "\x1B[92m";
	}
	var _this3 = this.colormap_fg;
	var key3 = "yellow";
	if(__map_reserved[key3] != null) {
		_this3.setReserved(key3,"\x1B[93m");
	} else {
		_this3.h[key3] = "\x1B[93m";
	}
	var _this4 = this.colormap_fg;
	var key4 = "blue";
	if(__map_reserved[key4] != null) {
		_this4.setReserved(key4,"\x1B[94m");
	} else {
		_this4.h[key4] = "\x1B[94m";
	}
	var _this5 = this.colormap_fg;
	var key5 = "magenta";
	if(__map_reserved[key5] != null) {
		_this5.setReserved(key5,"\x1B[95m");
	} else {
		_this5.h[key5] = "\x1B[95m";
	}
	var _this6 = this.colormap_fg;
	var key6 = "cyan";
	if(__map_reserved[key6] != null) {
		_this6.setReserved(key6,"\x1B[96m");
	} else {
		_this6.h[key6] = "\x1B[96m";
	}
	var _this7 = this.colormap_fg;
	var key7 = "white";
	if(__map_reserved[key7] != null) {
		_this7.setReserved(key7,"\x1B[97m");
	} else {
		_this7.h[key7] = "\x1B[97m";
	}
	var _this8 = this.colormap_fg;
	var key8 = "black";
	if(__map_reserved[key8] != null) {
		_this8.setReserved(key8,"\x1B[30m");
	} else {
		_this8.h[key8] = "\x1B[30m";
	}
	var _this9 = this.colormap_fg;
	var key9 = "darkred";
	if(__map_reserved[key9] != null) {
		_this9.setReserved(key9,"\x1B[31m");
	} else {
		_this9.h[key9] = "\x1B[31m";
	}
	var _this10 = this.colormap_fg;
	var key10 = "darkgreen";
	if(__map_reserved[key10] != null) {
		_this10.setReserved(key10,"\x1B[32m");
	} else {
		_this10.h[key10] = "\x1B[32m";
	}
	var _this11 = this.colormap_fg;
	var key11 = "darkyellow";
	if(__map_reserved[key11] != null) {
		_this11.setReserved(key11,"\x1B[33m");
	} else {
		_this11.h[key11] = "\x1B[33m";
	}
	var _this12 = this.colormap_fg;
	var key12 = "darkblue";
	if(__map_reserved[key12] != null) {
		_this12.setReserved(key12,"\x1B[34m");
	} else {
		_this12.h[key12] = "\x1B[34m";
	}
	var _this13 = this.colormap_fg;
	var key13 = "darkmagenta";
	if(__map_reserved[key13] != null) {
		_this13.setReserved(key13,"\x1B[35m");
	} else {
		_this13.h[key13] = "\x1B[35m";
	}
	var _this14 = this.colormap_fg;
	var key14 = "darkcyan";
	if(__map_reserved[key14] != null) {
		_this14.setReserved(key14,"\x1B[36m");
	} else {
		_this14.h[key14] = "\x1B[36m";
	}
	var _this15 = this.colormap_fg;
	var key15 = "gray";
	if(__map_reserved[key15] != null) {
		_this15.setReserved(key15,"\x1B[37m");
	} else {
		_this15.h[key15] = "\x1B[37m";
	}
	this.colormap_bg = new haxe_ds_StringMap();
	var _this16 = this.colormap_bg;
	var key16 = "darkgray";
	if(__map_reserved[key16] != null) {
		_this16.setReserved(key16,"\x1B[100m");
	} else {
		_this16.h[key16] = "\x1B[100m";
	}
	var _this17 = this.colormap_bg;
	var key17 = "red";
	if(__map_reserved[key17] != null) {
		_this17.setReserved(key17,"\x1B[101m");
	} else {
		_this17.h[key17] = "\x1B[101m";
	}
	var _this18 = this.colormap_bg;
	var key18 = "green";
	if(__map_reserved[key18] != null) {
		_this18.setReserved(key18,"\x1B[102m");
	} else {
		_this18.h[key18] = "\x1B[102m";
	}
	var _this19 = this.colormap_bg;
	var key19 = "yellow";
	if(__map_reserved[key19] != null) {
		_this19.setReserved(key19,"\x1B[103m");
	} else {
		_this19.h[key19] = "\x1B[103m";
	}
	var _this20 = this.colormap_bg;
	var key20 = "blue";
	if(__map_reserved[key20] != null) {
		_this20.setReserved(key20,"\x1B[104m");
	} else {
		_this20.h[key20] = "\x1B[104m";
	}
	var _this21 = this.colormap_bg;
	var key21 = "magenta";
	if(__map_reserved[key21] != null) {
		_this21.setReserved(key21,"\x1B[105m");
	} else {
		_this21.h[key21] = "\x1B[105m";
	}
	var _this22 = this.colormap_bg;
	var key22 = "cyan";
	if(__map_reserved[key22] != null) {
		_this22.setReserved(key22,"\x1B[106m");
	} else {
		_this22.h[key22] = "\x1B[106m";
	}
	var _this23 = this.colormap_bg;
	var key23 = "white";
	if(__map_reserved[key23] != null) {
		_this23.setReserved(key23,"\x1B[107m");
	} else {
		_this23.h[key23] = "\x1B[107m";
	}
	var _this24 = this.colormap_bg;
	var key24 = "black";
	if(__map_reserved[key24] != null) {
		_this24.setReserved(key24,"\x1B[40m");
	} else {
		_this24.h[key24] = "\x1B[40m";
	}
	var _this25 = this.colormap_bg;
	var key25 = "darkred";
	if(__map_reserved[key25] != null) {
		_this25.setReserved(key25,"\x1B[41m");
	} else {
		_this25.h[key25] = "\x1B[41m";
	}
	var _this26 = this.colormap_bg;
	var key26 = "darkgreen";
	if(__map_reserved[key26] != null) {
		_this26.setReserved(key26,"\x1B[42m");
	} else {
		_this26.h[key26] = "\x1B[42m";
	}
	var _this27 = this.colormap_bg;
	var key27 = "darkyellow";
	if(__map_reserved[key27] != null) {
		_this27.setReserved(key27,"\x1B[43m");
	} else {
		_this27.h[key27] = "\x1B[43m";
	}
	var _this28 = this.colormap_bg;
	var key28 = "darkblue";
	if(__map_reserved[key28] != null) {
		_this28.setReserved(key28,"\x1B[44m");
	} else {
		_this28.h[key28] = "\x1B[44m";
	}
	var _this29 = this.colormap_bg;
	var key29 = "darkmagenta";
	if(__map_reserved[key29] != null) {
		_this29.setReserved(key29,"\x1B[45m");
	} else {
		_this29.h[key29] = "\x1B[45m";
	}
	var _this30 = this.colormap_bg;
	var key30 = "darkcyan";
	if(__map_reserved[key30] != null) {
		_this30.setReserved(key30,"\x1B[46m");
	} else {
		_this30.h[key30] = "\x1B[46m";
	}
	var _this31 = this.colormap_bg;
	var key31 = "gray";
	if(__map_reserved[key31] != null) {
		_this31.setReserved(key31,"\x1B[47m");
	} else {
		_this31.h[key31] = "\x1B[47m";
	}
};
djNode_Terminal.__name__ = ["djNode","Terminal"];
djNode_Terminal.prototype = {
	demoPrintColors: function() {
		var distanceBetweenColumns = 15;
		process.stdout.write("Available Colors" + "\n");
		this.drawLine();
		process.stdout.write("\x1B[s");
		var _g = 0;
		var _g1 = djNode_Terminal.AVAIL_COLORS;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i == "black") {
				this.bg("gray");
			} else {
				this.bg("black");
			}
			var _this = this.fg(i);
			process.stdout.write(i);
			process.stdout.write("\n");
			var _this1 = _this;
			process.stdout.write("\x1B[39m");
		}
		process.stdout.write("\x1B[0m");
		process.stdout.write("\x1B[u");
		var _g2 = 0;
		var _g11 = djNode_Terminal.AVAIL_COLORS;
		while(_g2 < _g11.length) {
			var i1 = _g11[_g2];
			++_g2;
			process.stdout.write("\x1B[" + distanceBetweenColumns + "C");
			if(i1 == "white" || i1 == "yellow") {
				this.fg("darkgray");
			} else {
				this.fg("white");
			}
			var _this2 = this.bg(i1);
			process.stdout.write(i1);
			process.stdout.write("\n");
			var _this3 = _this2;
			process.stdout.write("\x1B[49m");
		}
		this.drawLine();
	}
	,getWidth: function() {
		return process.stdout.columns;
	}
	,getHeight: function() {
		return process.stdout.rows;
	}
	,print: function(str) {
		process.stdout.write(str);
		return this;
	}
	,println: function(str) {
		process.stdout.write(str + "\n");
		return this;
	}
	,fg: function(col) {
		if(col == null) {
			process.stdout.write("\x1B[39m");
			return this;
		}
		var _this = this.colormap_fg;
		var str = __map_reserved[col] != null ? _this.getReserved(col) : _this.h[col];
		process.stdout.write(str);
		return this;
	}
	,bg: function(col) {
		if(col == null) {
			process.stdout.write("\x1B[49m");
			return this;
		}
		var _this = this.colormap_bg;
		var str = __map_reserved[col] != null ? _this.getReserved(col) : _this.h[col];
		process.stdout.write(str);
		return this;
	}
	,bold: function() {
		process.stdout.write("\x1B[1m");
		return this;
	}
	,resetFg: function() {
		process.stdout.write("\x1B[39m");
		return this;
	}
	,resetBg: function() {
		process.stdout.write("\x1B[49m");
		return this;
	}
	,resetBold: function() {
		process.stdout.write("\x1B[21m");
		return this;
	}
	,reset: function() {
		process.stdout.write("\x1B[0m");
		return this;
	}
	,endl: function() {
		process.stdout.write("\n");
		return this;
	}
	,up: function(x) {
		if(x == null) {
			x = 1;
		}
		process.stdout.write("\x1B[" + x + "A");
		return this;
	}
	,down: function(x) {
		if(x == null) {
			x = 1;
		}
		process.stdout.write("\x1B[" + x + "B");
		return this;
	}
	,forward: function(x) {
		if(x == null) {
			x = 1;
		}
		process.stdout.write("\x1B[" + x + "C");
		return this;
	}
	,back: function(x) {
		if(x == null) {
			x = 1;
		}
		process.stdout.write("\x1B[" + x + "D");
		return this;
	}
	,move: function(x,y) {
		process.stdout.write("\x1B[" + y + ";" + x + "f");
		return this;
	}
	,savePos: function() {
		process.stdout.write("\x1B[s");
		return this;
	}
	,restorePos: function() {
		process.stdout.write("\x1B[u");
		return this;
	}
	,pageDown: function() {
		process.stdout.write("\x1B[s");
		var str = StringTools.lpad("","\n",this.getHeight() + 1);
		process.stdout.write(str);
		process.stdout.write("\x1B[u");
		return this;
	}
	,clearFromHere: function(num) {
		process.stdout.write("\x1B[s");
		var _this = this;
		var str = StringTools.lpad(""," ",num);
		process.stdout.write(str);
		process.stdout.write("\x1B[u");
		return this;
	}
	,clearLine: function(type) {
		process.stdout.write("\x1B[" + Std.string(type != null ? type : 2) + "K");
		return this;
	}
	,clearScreen: function(type) {
		process.stdout.write("\x1B[" + Std.string(type != null ? type : 2) + "J");
		return this;
	}
	,drawLine: function(symbol,length) {
		if(symbol == null) {
			symbol = djNode_Terminal.DEFAULT_LINE_SYMBOL;
		}
		if(length == null) {
			length = djNode_Terminal.DEFAULT_LINE_WIDTH;
		}
		var str = StringTools.lpad("",symbol,length);
		process.stdout.write(str);
		process.stdout.write("\n");
		return this;
	}
	,H1: function(text,color) {
		if(color == null) {
			color = "darkgreen";
		}
		var str = this.sprintf("~" + color + "~ " + djNode_Terminal.H1_SYMBOL + "~!~ ~white~~bg_" + color + "~" + text + "~!~\n ~line~");
		process.stdout.write(str);
	}
	,H2: function(text,color) {
		if(color == null) {
			color = "cyan";
		}
		var str = this.sprintf(" ~bg_" + color + "~~black~" + djNode_Terminal.H2_SYMBOL + "~!~ ~" + color + "~" + text + "~!~\n ~line2~");
		process.stdout.write(str);
	}
	,H3: function(text,color) {
		if(color == null) {
			color = "blue";
		}
		var str = this.sprintf("~" + color + "~ " + djNode_Terminal.H3_SYMBOL + " ~!~" + text + "\n ~line2~");
		process.stdout.write(str);
	}
	,list: function(text,color) {
		if(color == null) {
			color = "green";
		}
		var str = this.sprintf("~" + color + "~  " + djNode_Terminal.LIST_SYMBOL + " ~!~" + text + "\n");
		process.stdout.write(str);
	}
	,printf: function(str) {
		var str1 = this.sprintf(str);
		process.stdout.write(str1);
		return this;
	}
	,cursorHide: function() {
		process.stdout.write("\x1B[?25l");
		return this;
	}
	,cursorShow: function() {
		process.stdout.write("\x1B[?25h");
		return this;
	}
	,sprintf: function(str) {
		var _gthis = this;
		return new EReg("(~\\S[^~]*~)","g").map(str,function(reg) {
			var s = HxOverrides.substr(reg.matched(0).substring(1),0,-1);
			switch(s) {
			case "!":
				return "\x1B[0m";
			case "!bg":
				return "\x1B[49m";
			case "!fg":
				return "\x1B[39m";
			case "line":
				return StringTools.lpad("",djNode_Terminal.DEFAULT_LINE_SYMBOL,djNode_Terminal.DEFAULT_LINE_WIDTH) + "\n";
			case "line2":
				return StringTools.lpad("",djNode_Terminal.DEFAULT_LINE_SYMBOL,Math.ceil(djNode_Terminal.DEFAULT_LINE_WIDTH / 2)) + "\n";
			default:
				try {
					if(HxOverrides.substr(s,0,3) == "bg_") {
						return _gthis.colormap_bg.get(HxOverrides.substr(s,3,null));
					} else {
						return _gthis.colormap_fg.get(s);
					}
				} catch( e ) {
					return "";
				}
			}
		});
	}
	,__class__: djNode_Terminal
};
var djNode_tools_FileTool = function() { };
djNode_tools_FileTool.__name__ = ["djNode","tools","FileTool"];
djNode_tools_FileTool.createRecursiveDir = function(inPath) {
	var paths = js_node_Path.normalize(inPath).split(js_node_Path.sep);
	var cM = paths.length;
	if(cM <= 0) {
		throw new js__$Boot_HaxeError("Path is empty!");
	}
	var c = 0;
	var p1 = "";
	if(paths[0].indexOf(":") > 0) {
		try {
			js_node_Fs.statSync(paths[0]);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,Error) ) {
				throw new js__$Boot_HaxeError("Drive " + paths[0] + " does not exist!!");
			} else throw(e);
		}
		c = 1;
		p1 = paths[0] + js_node_Path.sep;
	}
	while(c < cM) {
		p1 = js_node_Path.join(p1,paths[c]);
		if(djNode_tools_FileTool.pathExists(p1) == false) {
			js_node_Fs.mkdirSync(p1);
		}
		++c;
	}
};
djNode_tools_FileTool.pathExists = function(path) {
	try {
		js_node_Fs.statSync(path);
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		if( js_Boot.__instanceof(e,Error) ) {
			return false;
		} else throw(e);
	}
	return true;
};
djNode_tools_FileTool.moveFile = function(source,dest,onComplete,onProgress) {
	js_node_Fs.rename(source,dest,function(er) {
		if(er != null) {
			djNode_tools_FileTool.copyFile(source,dest,function() {
				try {
					js_node_Fs.unlinkSync(source);
				} catch( e ) {
					djNode_tools_LOG.log("Could not delete \"" + source + "\" while moving",null,{ fileName : "FileTool.hx", lineNumber : 91, className : "djNode.tools.FileTool", methodName : "moveFile"});
				}
				onComplete();
			},onProgress);
		} else {
			onComplete();
		}
	});
};
djNode_tools_FileTool.copyFile = function(source,dest,onComplete,onProgress) {
	var _in = js_node_Fs.createReadStream(source);
	var _out = js_node_Fs.createWriteStream(dest);
	_in.pipe(_out);
	_in.once("end",function() {
		_in.unpipe();
		_out.end();
		onComplete();
	});
	if(onProgress != null) {
		_out.on("data",function(data) {
			onProgress();
		});
	}
};
djNode_tools_FileTool.getFileListFromDir = function(inPath) {
	var allfiles = js_node_Fs.readdirSync(js_node_Path.normalize(inPath));
	var fileList = [];
	var _g = 0;
	while(_g < allfiles.length) {
		var i = allfiles[_g];
		++_g;
		var stats = js_node_Fs.statSync(js_node_Path.join(inPath,i));
		if(stats.isFile()) {
			fileList.push(i);
		}
	}
	return fileList;
};
djNode_tools_FileTool.getFileListFromWildcard = function(path) {
	var fileList = [];
	var basePath = js_node_Path.dirname(path);
	var extToGet = djNode_tools_FileTool.getFileExt(path).toLowerCase();
	var baseToGet;
	var exp = new EReg("(\\S*)\\.","");
	if(exp.match(js_node_Path.basename(path))) {
		baseToGet = exp.matched(1);
		if(baseToGet.length > 1 && baseToGet.indexOf("*") > 0) {
			throw new js__$Boot_HaxeError("Advanced search is currently unsupported, use basic [*.*] or [*.ext]");
		}
	} else {
		baseToGet = "*";
	}
	var allfiles = js_node_Fs.readdirSync(js_node_Path.normalize(basePath));
	var stats;
	var _g = 0;
	while(_g < allfiles.length) {
		var i = allfiles[_g];
		++_g;
		try {
			stats = js_node_Fs.statSync(js_node_Path.join(basePath,i));
		} catch( e ) {
			continue;
		}
		if(stats.isFile()) {
			if(baseToGet != "*") {
				if(exp.match(i)) {
					if(baseToGet != exp.matched(1)) {
						continue;
					}
				} else {
					continue;
				}
			}
			if(extToGet == "*") {
				fileList.push(js_node_Path.join(basePath,i));
				continue;
			}
			if(extToGet == HxOverrides.substr(js_node_Path.extname(i),1,null).toLowerCase()) {
				fileList.push(js_node_Path.join(basePath,i));
				continue;
			}
		}
	}
	return fileList;
};
djNode_tools_FileTool.getFileExt = function(file) {
	return HxOverrides.substr(js_node_Path.extname(file),1,null).toLowerCase();
};
djNode_tools_FileTool.getPathNoExt = function(file) {
	return js_node_Path.join(js_node_Path.parse(file).dir,js_node_Path.parse(file).name);
};
var djNode_tools_LOG = function() { };
djNode_tools_LOG.__name__ = ["djNode","tools","LOG"];
djNode_tools_LOG.init = function(file,realtime) {
	if(realtime == null) {
		realtime = false;
	}
	if(djNode_tools_LOG._isInited) {
		return;
	}
	djNode_tools_LOG._isInited = true;
	djNode_tools_LOG.messages = [];
	djNode_tools_LOG.messageTypes = ["DEBUG","INFO","WARN","ERROR","FATAL"];
	if(file != null) {
		djNode_tools_LOG.setLogFile(file,realtime);
	}
};
djNode_tools_LOG.pipeTrace = function() {
	haxe_Log.trace = function(msg,pos) {
		djNode_tools_LOG.log(msg,1,pos);
	};
};
djNode_tools_LOG.getLog = function() {
	return djNode_tools_LOG.messages;
};
djNode_tools_LOG.end = function() {
	if(djNode_tools_LOG.logFile != null && djNode_tools_LOG.flag_realtime_file == false) {
		var _g = 0;
		var _g1 = djNode_tools_LOG.messages;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			djNode_tools_LOG.push_File(i);
		}
	}
	if(djNode_tools_LOG.flag_socket_log) {
		djNode_tools_LOG.io.close();
	}
};
djNode_tools_LOG.log = function(message,level,pos) {
	if(level == null) {
		level = 1;
	}
	if(level < djNode_tools_LOG.logLevel) {
		return;
	}
	var logmsg = { pos : pos, log : message, level : level};
	if(djNode_tools_LOG.flag_keep_in_memory) {
		if(djNode_tools_LOG.messages.length == djNode_tools_LOG.param_memory_buffer) {
			djNode_tools_LOG.messages.shift();
		}
		djNode_tools_LOG.messages.push(logmsg);
	}
	if(djNode_tools_LOG.flag_socket_log) {
		djNode_tools_LOG.io.sockets.emit("logText",{ data : logmsg.log, pos : logmsg.pos, level : logmsg.level});
	}
	if(djNode_tools_LOG.flag_realtime_file && djNode_tools_LOG.logFile != null) {
		djNode_tools_LOG.push_File(logmsg);
	}
	if(djNode_tools_LOG.onLog != null) {
		djNode_tools_LOG.onLog(logmsg);
	}
};
djNode_tools_LOG.logObj = function(obj,level,pos) {
	if(level == null) {
		level = 1;
	}
	if(level < djNode_tools_LOG.logLevel) {
		return;
	}
	if(djNode_tools_LOG.flag_socket_log) {
		djNode_tools_LOG.io.sockets.emit("logObj",{ data : obj, pos : pos, level : level});
	}
	if(djNode_tools_LOG.flag_realtime_file && djNode_tools_LOG.logFile != null) {
		djNode_tools_LOG.push_File({ level : level, pos : pos, log : "---- OBJECT ----\n" + Std.string(obj)});
	}
	if(djNode_tools_LOG.onLog != null) {
		djNode_tools_LOG.onLog({ pos : pos, level : level, log : " OBJECT :: \n" + Std.string(obj)});
	}
};
djNode_tools_LOG.setSocketLogging = function(port) {
	if(port == null) {
		port = 80;
	}
	if(djNode_tools_LOG.io != null) {
		return;
	}
	djNode_tools_LOG.flag_socket_log = true;
	djNode_tools_LOG.io = require("socket.io").listen(port);
	djNode_tools_LOG.log("Socket, Listening to port " + port,null,{ fileName : "LOG.hx", lineNumber : 199, className : "djNode.tools.LOG", methodName : "setSocketLogging"});
	djNode_tools_LOG.io.sockets.on("connection",function(socket) {
		djNode_tools_LOG.log("Socket, Connected to client",null,{ fileName : "LOG.hx", lineNumber : 202, className : "djNode.tools.LOG", methodName : "setSocketLogging"});
		socket.on("disconnect",function() {
			djNode_tools_LOG.log("Socket, Disconnected from client",null,{ fileName : "LOG.hx", lineNumber : 205, className : "djNode.tools.LOG", methodName : "setSocketLogging"});
		});
		socket.emit("maxLines",djNode_tools_LOG.param_memory_buffer);
		if(djNode_tools_LOG.messages.length > 0) {
			var _g = 0;
			var _g1 = djNode_tools_LOG.messages;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				djNode_tools_LOG.io.sockets.emit("logText",{ data : i.log, pos : i.pos, level : i.level});
			}
		}
	});
};
djNode_tools_LOG.push_SocketText = function(l) {
	djNode_tools_LOG.io.sockets.emit("logText",{ data : l.log, pos : l.pos, level : l.level});
};
djNode_tools_LOG.push_SocketObj = function(data,level,pos) {
	if(level == null) {
		level = 0;
	}
	djNode_tools_LOG.io.sockets.emit("logObj",{ data : data, pos : pos, level : level});
};
djNode_tools_LOG.push_File = function(log) {
	var m = djNode_tools_LOG.messageTypes[log.level] + " (" + log.pos.fileName + ":" + log.pos.lineNumber + " ) " + log.log + "\n";
	js_node_Fs.appendFileSync(djNode_tools_LOG.logFile,m,"utf8");
};
djNode_tools_LOG.setLogFile = function(filename,realtime_update) {
	if(realtime_update == null) {
		realtime_update = false;
	}
	djNode_tools_LOG.logFile = filename;
	djNode_tools_LOG.flag_realtime_file = realtime_update;
	try {
		var fileHeader = " - LOG -\n" + " -------\n" + " - " + djNode_tools_LOG.logFile + "\n" + " - Created: " + HxOverrides.dateStr(new Date()) + "\n" + " - App: " + js_node_Path.basename(process.argv[1]) + "\n" + " ---------------------------------------------------\n\n";
		js_node_Fs.writeFileSync(djNode_tools_LOG.logFile,fileHeader,"utf8");
	} catch( e ) {
		djNode_tools_LOG.log("Could not create logfile - " + djNode_tools_LOG.logFile,3,{ fileName : "LOG.hx", lineNumber : 275, className : "djNode.tools.LOG", methodName : "setLogFile"});
		djNode_tools_LOG.logFile = null;
	}
	if(djNode_tools_LOG.flag_realtime_file && djNode_tools_LOG.messages.length > 0 && djNode_tools_LOG.logFile != null) {
		var _g = 0;
		var _g1 = djNode_tools_LOG.messages;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			djNode_tools_LOG.push_File(i);
		}
	}
};
djNode_tools_LOG.timeStart = function() {
	djNode_tools_LOG._t = new Date().getTime();
};
djNode_tools_LOG.timeGet = function() {
	return new Date().getTime() - djNode_tools_LOG._t | 0;
};
var djTui_BaseElement = function() {
	this.flag_can_focus = true;
	this.lockDraw = false;
	this.parent = null;
	this.isFocused = false;
	this.height = 0;
	this.width = 0;
	this.y = 0;
	this.x = 0;
	this.UID = djTui_BaseElement.UID_GEN++;
};
djTui_BaseElement.__name__ = ["djTui","BaseElement"];
djTui_BaseElement.focusNext = function(ar,act,loop) {
	if(loop == null) {
		loop = true;
	}
	if(ar.length == 0) {
		return false;
	}
	var ia = ar.indexOf(act);
	var j = ia;
	while(true) {
		++j;
		if(j >= ar.length) {
			if(ia == -1) {
				return false;
			}
			if(loop) {
				j = 0;
			} else {
				return false;
			}
		}
		if(j == ia) {
			return false;
		}
		if(ar[j].flag_can_focus) {
			break;
		}
	}
	ar[j].focus();
	return true;
};
djTui_BaseElement.prototype = {
	move: function(dx,dy) {
		this.pos(this.x + dx,this.y + dy);
		return this;
	}
	,pos: function(_x,_y) {
		this.x = _x;
		this.y = _y;
		return this;
	}
	,posNext: function(el,pad) {
		if(pad == null) {
			pad = 0;
		}
		this.x = el.x + el.width + pad;
		this.y = el.y;
		return this;
	}
	,setColors: function(fg,bg) {
		this.colorFG = fg;
		this.colorBG = bg;
		if(this.colorBG == null && this.parent != null) {
			this.colorBG = this.parent.colorBG;
		}
	}
	,size: function(_w,_h) {
		this.width = _w;
		this.height = _h;
		return this;
	}
	,focus: function() {
		if(this.isFocused || !this.flag_can_focus) {
			return;
		}
		this.callbacks("focus",this);
		this.isFocused = true;
		this.onFocusChange();
		this.draw();
	}
	,unfocus: function() {
		if(!this.isFocused) {
			return;
		}
		this.isFocused = false;
		this.onFocusChange();
		this.draw();
	}
	,onAdded: function() {
	}
	,onKey: function(k) {
	}
	,onFocusChange: function() {
	}
	,draw: function() {
	}
	,overlapsWith: function(el) {
		if(this.x + this.width > el.x && this.x < el.x + el.width && this.y + this.height > el.y) {
			return this.y < el.y + el.height;
		} else {
			return false;
		}
	}
	,_readyCol: function() {
		djTui_WM.T.reset().fg(this.colorFG).bg(this.colorBG);
	}
	,toString: function() {
		return Type.getClassName(js_Boot.getClass(this)) + (" - UID:" + this.UID + ", x:" + this.x + ", y:" + this.y + ", width:" + this.width + ", height:" + this.height);
	}
	,__class__: djTui_BaseElement
};
var djTui_Draw = function() {
};
djTui_Draw.__name__ = ["djTui","Draw"];
djTui_Draw.prototype = {
	rect: function(x,y,width,height,$char) {
		if($char == null) {
			$char = " ";
		}
		var s = StringTools.lpad("",$char,width);
		var _g1 = y;
		var _g = y + height;
		while(_g1 < _g) {
			var ff = _g1++;
			djTui_WM.T.move(x,ff).print(s);
		}
	}
	,border: function(x,y,width,height,style) {
		if(style == null) {
			style = 1;
		}
		var bs = djTui_Styles.border[style];
		var c = 0;
		djTui_WM.T.move(x,y);
		djTui_WM.T.print(bs[0] + StringTools.lpad("",bs[1],width - 2) + bs[2]);
		while(++c < height) {
			djTui_WM.T.move(x,y + c).print(bs[6]);
			djTui_WM.T.moveR(width - 2,0).print(bs[7]);
		}
		djTui_WM.T.move(x,y + height - 1);
		djTui_WM.T.print(bs[3] + StringTools.lpad("",bs[4],width - 2) + bs[5]);
	}
	,drawArray: function(ar,x,y) {
		var _g1 = 0;
		var _g = ar.length;
		while(_g1 < _g) {
			var i = _g1++;
			djTui_WM.T.move(x,y + i).print(ar[i]);
		}
	}
	,__class__: djTui_Draw
};
var djTui_StrTool = function() { };
djTui_StrTool.__name__ = ["djTui","StrTool"];
djTui_StrTool.bytesToMBStr = function(bytes) {
	return Std.string(Math.ceil(bytes / 1048576));
};
djTui_StrTool.padString = function(str,length,align) {
	if(align == null) {
		align = "left";
	}
	var b = length - str.length;
	if(b == 0) {
		return str;
	}
	if(b < 0) {
		return str.substring(0,length - 1) + "~";
	}
	switch(align) {
	case "center":
		var _l = Math.ceil(b / 2);
		var _r = Math.floor(b / 2);
		str = StringTools.rpad(""," ",_l) + str + StringTools.rpad(""," ",_r);
		break;
	case "left":
		str = StringTools.rpad(str," ",length);
		break;
	case "right":
		str = StringTools.lpad(str," ",length);
		break;
	}
	return str;
};
djTui_StrTool.splitToLines = function(str,width) {
	var _this_r = new RegExp("(\n)","g".split("u").join(""));
	str = str.replace(_this_r," #nl# ");
	var _this_r1 = new RegExp("(\\s|\t)","g".split("u").join(""));
	str = str.replace(_this_r1," ");
	var ar = str.split(" ");
	var result = [];
	var f = 0;
	var fmax = ar.length;
	var clen = 0;
	var line = "";
	var _ll = 0;
	var ___ffpush = function(s) {
		result.push(s);
		clen = 0;
		line = "";
	};
	while(true) {
		if(ar[f] == "#nl#") {
			___ffpush(line);
			if(!(++f < fmax)) {
				break;
			} else {
				continue;
			}
		}
		_ll = ar[f].length;
		if(_ll + clen < width) {
			line += ar[f] + " ";
			clen += _ll + 1;
		} else if(_ll + clen > width) {
			if(clen > 0) {
				result.push(line);
				line = ar[f] + " ";
				clen = _ll + 1;
			} else {
				line = ar[f].substring(0,width - 1) + "~";
				___ffpush(line);
			}
		} else {
			___ffpush(line + ar[f]);
		}
		if(!(++f < fmax)) {
			break;
		}
	}
	if(clen > 0) {
		___ffpush(line);
	}
	return result;
};
djTui_StrTool.repeatStr = function(length,$char) {
	var ar = [];
	while(length-- > 0) ar.push($char);
	return ar.join("");
};
djTui_StrTool.loopString = function(source,length,offset) {
	var str = "";
	var _loopCounter = 0;
	while(_loopCounter < length) {
		str += source.charAt((_loopCounter + offset) % source.length);
		++_loopCounter;
	}
	return str;
};
var djTui_WMSkin = function() {
};
djTui_WMSkin.__name__ = ["djTui","WMSkin"];
djTui_WMSkin.prototype = {
	__class__: djTui_WMSkin
};
var djTui_Styles = function() { };
djTui_Styles.__name__ = ["djTui","Styles"];
djTui_Styles.init = function() {
	djTui_Styles.border = [];
	djTui_Styles.border[1] = ["┌","─","┐","└","─","┘","│","│"];
	djTui_Styles.border[2] = ["╔","═","╗","╚","═","╝","║","║"];
	var s = new djTui_WMSkin();
	s.win_fg = "white";
	s.win_bg = "blue";
	s.win_hl = "yellow";
	s.disabled_fg = "gray";
	s.accent_bg = "red";
	s.accent_fg = "yellow";
	s.accent_blur_bg = "cyan";
	s.accent_blur_fg = "black";
	djTui_Styles.skins = [];
	djTui_Styles.skins[0] = s;
};
var djTui_WM = function() { };
djTui_WM.__name__ = ["djTui","WM"];
djTui_WM.create = function(i,t,_w,_h) {
	if(_h == null) {
		_h = 0;
	}
	if(_w == null) {
		_w = 0;
	}
	djTui_WM.width = _w;
	djTui_WM.height = _h;
	djTui_WM.I = i;
	djTui_WM.T = t;
	djTui_WM.D = new djTui_Draw();
	if(djTui_WM.width <= 0) {
		djTui_WM.width = djTui_WM.T.MAX_WIDTH;
	}
	if(djTui_WM.height <= 0) {
		djTui_WM.height = djTui_WM.T.MAX_HEIGHT;
	}
	djTui_Styles.init();
	djTui_WM.skin = djTui_Styles.skins[0];
	djTui_WM.win_list = [];
	djTui_WM.I.onKey = djTui_WM.onKey;
	djTui_WM.I.start();
	if(djTui_WM.skin.tui_bg != null) {
		djTui_WM.T.bg(djTui_WM.skin.tui_bg);
		djTui_WM.D.rect(0,0,djTui_WM.width,djTui_WM.height);
	}
};
djTui_WM.addWindow = function(w,autoFocus) {
	if(autoFocus == null) {
		autoFocus = true;
	}
	haxe_Log.trace("Added Window UID:{w.UID}",{ fileName : "WM.hx", lineNumber : 93, className : "djTui.WM", methodName : "addWindow"});
	djTui_WM.win_list.push(w);
	w.callback_wm = djTui_WM.onWindowCallbacks;
	w.isOpen = true;
	if(autoFocus) {
		w.focus();
	} else {
		w.draw();
	}
};
djTui_WM.focusNext = function() {
	djTui_BaseElement.focusNext(djTui_WM.win_list,djTui_WM.active);
};
djTui_WM.onKey = function(key) {
	if(djTui_WM.flag_tab_switch_windows && key == "tab") {
		djTui_WM.focusNext();
	} else if(djTui_WM.active != null) {
		djTui_WM.active.onKey(key);
	}
};
djTui_WM.onWindowCallbacks = function(status,win) {
	switch(status) {
	case "close":
		break;
	case "focus":
		if(djTui_WM.active == win) {
			return;
		}
		if(djTui_WM.active != null) {
			djTui_WM.active.unfocus();
		}
		djTui_WM.active_last = djTui_WM.active;
		djTui_WM.active = win;
		break;
	case "focus_next":
		if(!djTui_BaseElement.focusNext(djTui_WM.win_list,djTui_WM.active)) {
			win.focusNext();
		}
		break;
	case "open":
		break;
	default:
	}
};
var djTui_Window = function(_border,_skin) {
	if(_border == null) {
		_border = 1;
	}
	this.flag_enableCursorNav = true;
	this.flag_enableTab = true;
	this.flag_lockFocus = false;
	this.isOpen = false;
	djTui_BaseElement.call(this);
	this.el_children = [];
	this.setColors(djTui_WM.skin.win_fg,djTui_WM.skin.win_bg);
	this.borderStyle = _border;
	this.skin = _skin;
	if(this.skin == null) {
		this.skin = djTui_WM.skin;
	}
	this.padding(1,1);
	this.callbacks = function(_,_1) {
	};
};
djTui_Window.__name__ = ["djTui","Window"];
djTui_Window.__super__ = djTui_BaseElement;
djTui_Window.prototype = $extend(djTui_BaseElement.prototype,{
	padding: function(xx,yy) {
		this.padX = xx;
		this.padY = yy;
		return this;
	}
	,addChild: function(el) {
		if(this.width == 0 || this.height == 0) {
			throw new js__$Boot_HaxeError("Window with zero size");
		}
		this.el_children.push(el);
		el.parent = this;
		el.callbacks = $bind(this,this.onElementCallback);
		el.onFocusChange();
		el.onAdded();
		if(this.isOpen) {
			el.draw();
		}
		this.lastAdded = el;
	}
	,removeChild: function(el) {
		if(HxOverrides.remove(this.el_children,el)) {
			if(this.isOpen) {
				this.draw();
			}
		}
	}
	,addStacked: function(el,yPad) {
		if(yPad == null) {
			yPad = 0;
		}
		if(this.lastAdded == null) {
			el.x = this.x + this.padX;
			el.y = this.y + this.padY;
		} else {
			el.x = this.lastAdded.x;
			el.y = this.lastAdded.y + this.lastAdded.height + yPad;
		}
		this.addChild(el);
	}
	,focus: function() {
		if(!this.flag_can_focus) {
			return;
		}
		this.callback_wm("focus",this);
		djTui_BaseElement.prototype.focus.call(this);
		if(this.el_children.length == 0) {
			return;
		}
		djTui_BaseElement.focusNext(this.el_children,null);
	}
	,unfocus: function() {
		if(!this.isFocused) {
			return;
		}
		if(this.active != null) {
			this.active.unfocus();
		}
		this.active_last = this.active;
		this.active = null;
		djTui_BaseElement.prototype.unfocus.call(this);
	}
	,draw: function() {
		if(this.lockDraw) {
			return;
		}
		djTui_WM.T.reset().fg(this.colorFG).bg(this.colorBG);
		djTui_WM.D.rect(this.x,this.y,this.width,this.height);
		if(this.borderStyle > 0) {
			if(this.isFocused) {
				djTui_WM.T.fg(djTui_WM.skin.win_hl);
			} else {
				djTui_WM.T.fg(djTui_WM.skin.win_fg);
			}
			djTui_WM.D.border(this.x,this.y,this.width,this.height,this.borderStyle);
		}
		var _g = 0;
		var _g1 = this.el_children;
		while(_g < _g1.length) {
			var el = _g1[_g];
			++_g;
			if(!el.lockDraw) {
				el.draw();
			}
		}
	}
	,focusNext: function(loop) {
		if(loop == null) {
			loop = true;
		}
		djTui_BaseElement.focusNext(this.el_children,this.active,loop);
	}
	,focusPrev: function() {
		var ind = this.el_children.indexOf(this.active);
		if(ind < 1) {
			return;
		}
		while(ind-- > 0) if(this.el_children[ind].flag_can_focus) {
			this.el_children[ind].focus();
			return;
		}
	}
	,isLastFocusableElement: function() {
		var ai = this.el_children.indexOf(this.active);
		var ni = this.el_children.length;
		while(ni-- > 0) if(this.el_children[ni].flag_can_focus) {
			break;
		}
		return ai == ni;
	}
	,onKey: function(key) {
		if(key == "tab") {
			if(!this.flag_enableTab) {
				return;
			}
			if(this.isLastFocusableElement()) {
				if(this.flag_lockFocus) {
					return;
				}
				this.callback_wm("focus_next",this);
			} else {
				this.focusNext();
			}
		} else {
			if(this.flag_enableCursorNav) {
				if(key == "up") {
					this.focusPrev();
				} else if(key == "down") {
					this.focusNext(false);
				}
			}
			if(this.active != null) {
				this.active.onKey(key);
			}
		}
	}
	,onElementCallback: function(st,el) {
		if(st == "focus") {
			if(this.active != null) {
				this.active.unfocus();
			}
			this.active_last = this.active;
			this.active = el;
		}
	}
	,set_title: function(val) {
		this.title = val;
		if(this.title_el != null) {
			this.removeChild(this.title_el);
		}
		if(this.title.length > this.width - 4) {
			this.title_el = new djTui_el_Label(this.title,this.width - 4);
		} else {
			this.title_el = new djTui_el_Label("| " + this.title + " |");
		}
		this.title_el.setColors(djTui_WM.skin.win_hl,this.colorBG);
		this.title_el.pos(this.x + (this.width / 2 - this.title_el.width / 2 | 0),this.y);
		this.addChild(this.title_el);
		return val;
	}
	,__class__: djTui_Window
});
var djTui_el_Button = function(txt,_useStyle,_minWidth) {
	if(_minWidth == null) {
		_minWidth = 3;
	}
	if(_useStyle == null) {
		_useStyle = true;
	}
	djTui_BaseElement.call(this);
	this.height = 1;
	this.useStyle = _useStyle;
	this.minWidth = _minWidth;
	this.set_text(txt);
};
djTui_el_Button.__name__ = ["djTui","el","Button"];
djTui_el_Button.__super__ = djTui_BaseElement;
djTui_el_Button.prototype = $extend(djTui_BaseElement.prototype,{
	onFocusChange: function() {
		if(this.isFocused) {
			this.setColors(this.parent.skin.accent_fg,this.parent.skin.accent_bg);
		} else {
			this.setColors(this.parent.skin.accent_blur_fg,null);
		}
	}
	,draw: function() {
		djTui_WM.T.reset().fg(this.colorFG).bg(this.colorBG);
		djTui_WM.T.move(this.x,this.y).print(this.text);
	}
	,onKey: function(k) {
		if(k == "enter" || k == "space") {
			this.callbacks("fire",this);
		}
	}
	,set_text: function(val) {
		this.text = val;
		if(this.text.length < this.minWidth) {
			this.text = djTui_StrTool.padString(this.text,this.minWidth,"center");
		}
		if(this.useStyle) {
			this.text = "[" + this.text + "]";
		}
		this.width = this.text.length;
		return val;
	}
	,__class__: djTui_el_Button
});
var djTui_el_Label = function(_txt,_width,_align) {
	if(_align == null) {
		_align = "left";
	}
	if(_width == null) {
		_width = 0;
	}
	djTui_BaseElement.call(this);
	this.flag_can_focus = false;
	this.height = 1;
	this.width = _width;
	this.autoSize = this.width == 0;
	this.align = _align;
	this.set_text(_txt);
};
djTui_el_Label.__name__ = ["djTui","el","Label"];
djTui_el_Label.__super__ = djTui_BaseElement;
djTui_el_Label.prototype = $extend(djTui_BaseElement.prototype,{
	onAdded: function() {
		this.setColors(this.parent.skin.win_fg);
	}
	,draw: function() {
		djTui_WM.T.reset().fg(this.colorFG).bg(this.colorBG);
		djTui_WM.T.move(this.x,this.y).print(this.displayText);
	}
	,highlight: function(on) {
		if(on == null) {
			on = true;
		}
		if(on) {
			this.setColors(this.parent.skin.accent_bg);
		} else {
			this.setColors(this.parent.skin.win_fg);
		}
		this.draw();
	}
	,set_text: function(val) {
		this.text = val;
		this.displayText = val;
		if(!this.autoSize) {
			this.displayText = djTui_StrTool.padString(this.text,this.width,this.align);
		} else {
			this.width = this.displayText.length;
		}
		return val;
	}
	,__class__: djTui_el_Label
});
var djTui_el_Toggle = function() {
	this.checked = false;
	djTui_BaseElement.call(this);
	this.setToggle(false);
};
djTui_el_Toggle.__name__ = ["djTui","el","Toggle"];
djTui_el_Toggle.__super__ = djTui_BaseElement;
djTui_el_Toggle.prototype = $extend(djTui_BaseElement.prototype,{
	onFocusChange: function() {
		if(this.isFocused) {
			this.setColors(this.parent.skin.accent_fg,this.parent.skin.accent_bg);
		} else {
			this.setColors(this.parent.skin.accent_blur_fg,null);
		}
	}
	,setToggle: function(b) {
		this.checked = b;
		if(this.checked) {
			this.text = "[ X ]";
		} else {
			this.text = "[   ]";
		}
	}
	,onKey: function(k) {
		if(k == "enter" || k == "space") {
			this.setToggle(!this.checked);
			this.draw();
		}
	}
	,draw: function() {
		djTui_WM.T.reset().fg(this.colorFG).bg(this.colorBG);
		djTui_WM.T.move(this.x,this.y).print(this.text);
	}
	,__class__: djTui_el_Toggle
});
var haxe_IMap = function() { };
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_Log = function() { };
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.prototype = {
	__class__: haxe_io_Bytes
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_node_Fs = require("fs");
var js_node_Path = require("path");
var js_node_buffer_Buffer = require("buffer").Buffer;
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = ["String"];
Array.__name__ = ["Array"];
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {};
djNode_Keycode.CTRLC = "\x03";
djNode_Keycode.ESC = "\x1B";
djNode_Keycode.UP = "\x1B[A";
djNode_Keycode.DOWN = "\x1B[B";
djNode_Keycode.LEFT = "\x1B[C";
djNode_Keycode.RIGHT = "\x1B[D";
djNode_Keycode.BACKSP = "\x08";
djNode_Keycode.TAB = "\t";
djNode_Keycode.ENTER = "\r";
djNode_Keycode.DELETE = "";
djNode_Keyboard.FLAG_CAN_BREAK = true;
djNode_Terminal.ESCAPE_SEQ = "\x1B[";
djNode_Terminal._BOLD = "\x1B[1m";
djNode_Terminal._DIM = "\x1B[2m";
djNode_Terminal._UNDERL = "\x1B[4m";
djNode_Terminal._BLINK = "\x1B[5m";
djNode_Terminal._HIDDEN = "\x1B[8m";
djNode_Terminal._RESET_ALL = "\x1B[0m";
djNode_Terminal._RESET_FG = "\x1B[39m";
djNode_Terminal._RESET_BG = "\x1B[49m";
djNode_Terminal._RESET_BOLD = "\x1B[21m";
djNode_Terminal._RESET_DIM = "\x1B[22m";
djNode_Terminal._RESET_UNDERL = "\x1B[24m";
djNode_Terminal._RESET_BLINK = "\x1B[25m";
djNode_Terminal._RESET_HIDDEN = "\x1B[28m";
djNode_Terminal.AVAIL_COLORS = ["black","white","gray","darkgray","red","darkred","green","darkgreen","blue","darkblue","cyan","darkcyan","magenta","darkmagenta","yellow","darkyellow"];
djNode_Terminal.DEFAULT_LINE_WIDTH = 50;
djNode_Terminal.DEFAULT_LINE_SYMBOL = "-";
djNode_Terminal.LIST_SYMBOL = "*";
djNode_Terminal.H1_SYMBOL = "#";
djNode_Terminal.H2_SYMBOL = "+";
djNode_Terminal.H3_SYMBOL = "=";
djNode_tools_LOG._isInited = false;
djNode_tools_LOG.logLevel = 0;
djNode_tools_LOG.flag_realtime_file = true;
djNode_tools_LOG.flag_socket_log = false;
djNode_tools_LOG.flag_keep_in_memory = true;
djNode_tools_LOG.param_memory_buffer = 8192;
djTui_BaseElement.UID_GEN = 1;
djTui_Styles.DEF_WINDOW_SIZE_X = 20;
djTui_Styles.DEF_WINDOW_SIZE_Y = 8;
djTui_WM.flag_tab_switch_windows = false;
js_Boot.__toStr = ({ }).toString;
DevMain.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=app.js.map
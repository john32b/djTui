package djTui.win;

import djTui.BaseElement;
import djTui.Styles.WMSkin;
import djTui.el.Button;

/**
 * A Table/grid of buttons where you can select 
 * between them using the arrow keys
 * --
 * NOTES:
 * 	- new().padding().size(); 	in this order only
 *  - primarily used for adding buttons, but you can add anything else with put();
 */
class ButtonGrid extends Window 
{

	// The relative X position of columns start
	// DEV: You can adjust the positioning of columns after size();
	public var col_pos:Array<Int>;
	
	// Which elements go in which column
	var col_el:Array<Array<Button>>;
	
	// Number of columns
	var col_count:Int;
	
	// Cursor position. Stores Indexes
	var c_x:Int;
	var c_y:Int;
	
	// Vertical Pad betwen elements
	var pad_el:Int; 
	
	// If true, will loop on the edges
	public var flag_loop:Bool = false;

	// - Styles
	var btn_style:Bool = false;		// use <>
	var btn_width:Int = 0;			// force width
	
	
	/**
	   @param	columns How many columns
	   @param	elementPad Vertical Padding between elements
	   @param	_borderStyle Border Style
	   @param	_skin Color Theme
	**/
	public function new(columns:Int = 2, elementPad:Int = 1, _borderStyle:Int = 1, ?_skin:WMSkin)
	{
		super(_borderStyle, _skin);
		col_pos = [];
		col_el = [];
		c_x = 0; c_y = 0;
		pad_el = elementPad;
		col_count = columns;
	}//---------------------------------------------------;

	/**
	   Sets button display mode
	   ~ Call this before adding elements
	   @param	buttonStyle if true, links will be displayed as < XXX >
	   @param	buttonWidth 0 for auto, other for forced width
	**/
	public function setStyle(buttonStyle:Bool, buttonWidth:Int = 0)
	{
		btn_style = buttonStyle;
		btn_width = buttonWidth;
	}//---------------------------------------------------;
	
	/**
	   Re-adjust column sizes. Usually called once
	   IMPORTANT: Call this after padding()
	   @return
	**/
	override public function size(_w:Int, _h:Int):BaseElement 
	{
		super.size(_w, _h);
		// Precalculate column starting position
		// DEV: Useful if I ever want to customize it later
		var colWidth:Int = Math.floor(inWidth / col_count);
		for (i in 0...col_count)
		{
			col_pos[i] = padX + colWidth * i;
		}
		return this;
	}//---------------------------------------------------;
	
	
	/**
	   Quickly add a button at a column. Conforms to global button style
	   @param	col The column to add the button to
	   @param	name Display name
	   @param	SID If you don't set a unique ID, it will be autogenerated 
					with "x,y" position on the grid, starting at (0:0)
	**/
	public function add(col:Int, text:String, ?SID:String)
	{
		var b = new Button(SID, text, btn_style, btn_width);
		putEl(b);
	}//---------------------------------------------------;
	
	
	/**
	   Appends an element at target column.
	   @param	col The column to append to
	   @param	el The element
	**/
	public function putEl(col:Int, el:BaseElement)
	{
		var xx = x + col_pos[col];
		var yy = y + padY;
		
		if (col_el[col] == null)
		{
			col_el[col] = [];
		}else
		{
			yy = col_el[col][rowsAt(col) - 1].y + 1 + pad_el;
		}
		
		if (SID == null)
		{
			SID = '$col,' + rowsAt(col); // 'x,y'
		}
		
		el.pos(xx, yy);
		addChild(el);
		col_el[col].push(el);
	}//---------------------------------------------------;
	
	override function onKey(key:String) 
	{
		// Capture the main directions first:
		switch(key)
		{
			case "up":
				focusRelY(-1); return;
			case "down":
				focusRelY(1); return;
			case "left":
				focusRelX(-1); return;
			case "right":
				focusRelX(1); return;
			default:
		}
		
		super.onKey(key);
	}//---------------------------------------------------;
	
	// Focus relative to cursor at Y axis,
	// Will automatically loop if flag is set	
	function focusRelY(dir:Int)
	{
		if (col_el[c_x][c_y + dir] == null)
		{
			if (flag_loop) {
				if (c_y + dir < 0) c_y = rowsAt(c_x) - 1; else c_y = 0;
			}else return;
		
		}else
		{
			c_y += dir;
		}
		
		col_el[c_x][c_y].focus();
		
	}//---------------------------------------------------;
	
	// Focus relative to cursor at X axis,
	// Will automatically loop if flag is set
	function focusRelX(dir:Int)
	{
		if (col_el[c_x + dir] == null)
		{
			if (flag_loop) {
				if (c_x + dir < 0) c_x = col_count - 1; else c_x = 0;
			}else return;
		}else
		{
			c_x += dir;
		}
		
		// Check if the next column has a valid same row
		// If not focus the last element
		// DEV: Should never be <0. You need to add at least one element at each row
		if (col_el[c_x][c_y] == null)
		{
			c_y = rowsAt(c_x) - 1; 
		}
		
		col_el[c_x][c_y].focus();
	}//---------------------------------------------------;
	
	// -- helper
	function rowsAt(col:Int)
	{
		return col_el[col].length;
	}//---------------------------------------------------;
	
	
	// Adjust pointer location
	override public function focus() 
	{
		super.focus();
		c_x = 0;
		c_y = 0;
	}//---------------------------------------------------;
	
	
}// --